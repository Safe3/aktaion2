import re
import entropy as en

class microBehaviors:

    # Define a class method for matching base64 strings
    def isBase64(s):
        # check that the string has no remainder in %4, check that it only contains valid characters
        return re.match('^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$', s)

    # Define a class method for matching url encoded strings
    def isUrlEncoded(s):
        # check if the string contains 1/3 or more % characters
        percentCount = 0
        try:
            for c in s:
                if c == '%':
                    percentCount = percentCount +1

            if (percentCount/len(s)) >= (1/3):
                return(True)
            else:
                return(False)
        except(ZeroDivisionError):
            # Catch all exceptions, specifically division by 0 from empty strings
            return(False)

    def max_path_length(inList):
        """return the max path length of all URIs in list"""
        # Declare local var that will store the max path length
        maxLength = 0

        # Count the depth of the file structure for each uri in inList
        for uri in inList:

            # Check the current uri path length against the running length
            if uri.count('/') > maxLength :
                maxLength = uri.count('/')

        return(maxLength)

    def min_path_length(inList):
        """return the min path length of all URIs"""

        # Declare local var that will store the min path length
        minLength = inList[0].count('/')

        # Count the depth of the file structure for each uri in inList
        for uri in inList:

            # Check the current uri path length against the running length
            if uri.count('/') < minLength:
                minLength = uri.count('/')

        return (minLength)

    def max_length(inList):
        """Max length of all URIs in list"""
        maxLength = len(inList[0])

        for uri in inList:
            if len(uri) > maxLength:
                maxLength = len(uri)

        return(maxLength)

    def min_length(inList):
        """Min length of all URIs in list"""
        minLength = len(inList[0])

        for uri in inList:
            if len(uri) < minLength:
                minLength = len(uri)

        return(minLength)

    def max_entropy(inList):
        """ returns the maximum shannon entropy of URIs in the list"""

        maxEntropy = en.shannon_entropy(inList[0])

        for uri in inList:
            if maxEntropy <  en.shannon_entropy(uri):
                maxEntropy = en.shannon_entropy(uri)

        return(maxEntropy)

    def min_entropy(inList):
        """ returns the minimum shannon entropy of URIs in the list"""

        minEntropy = en.shannon_entropy(inList[0])

        for uri in inList:
            if minEntropy > en.shannon_entropy(uri):
                minEntropy = en.shannon_entropy(uri)

        return(minEntropy)

    def base_64_match(inList):
        """return the number of URI in inList that could be a base64 encoded string"""

        count = 0

        for uri in inList:
            if microBehaviors.isBase64(uri):
                count = count+1

        return(count)

    def percent_encoding_match(inList):
        """Number of URIs with large number of % encoded strings"""
        count = 0
        for uri in inList:
            if microBehaviors.isUrlEncoded(uri):
                count = count +1

        return(count)

    def uri_distinct(inList):
        """Number of URI's that are unique"""
        # Instantiate the unique strings counter
        count = len(inList)

        # Recursively check for the head of the list in the rest of the list
        while len(inList) > 0:

            # If the head of the list matches, decrement the unique strins counter
            if inList[0] in inList[1:]:
                count = count - 1
            del inList[0]

        return(count)

